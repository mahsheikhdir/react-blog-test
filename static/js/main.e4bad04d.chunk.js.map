{"version":3,"sources":["Comments.js","Post.js","Profile.js","App.js","serviceWorker.js","index.js"],"names":["Comments","condition","content","postId","useState","comments","setComments","useEffect","fetch","then","res","json","data","ListGroup","variant","Item","length","map","comment","key","id","body","Spinner","animation","role","style","margin","className","Post","post","users","imgLink","name","setName","t","find","user","userId","undefined","Card","Header","Title","title","Body","Image","src","href","Text","Button","Profile","props","state","posts","userPosts","this","match","params","Promise","all","res1","res2","setState","catch","console","log","label","info","horizontal","paddingTop","width","Container","createBox","username","phone","address","city","company","website","catchPhrase","marginTop","Component","MainNav","Navbar","bg","Brand","Nav","Link","App","imgLinks","res3","path","component","Home","AllPosts","About","Jumbotron","download_url","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e4bad04d.chunk.js","sourcesContent":["import React, {useEffect, useState} from 'react';\r\nimport {Spinner, ListGroup} from 'react-bootstrap';\r\n\r\nfunction loader(condition, content) {\r\n    if (condition) {\r\n      return (\r\n        <Spinner animation=\"border\" role=\"status\" style={{ margin: 20 }}>\r\n          <span className=\"sr-only\">Loading...</span>\r\n        </Spinner>\r\n      );\r\n    } else {\r\n      return content;\r\n    }\r\n  }\r\n  \r\n  const Comments = ({ postId }) => {\r\n    const [comments, setComments] = useState([]);\r\n  \r\n    useEffect(() => {\r\n      fetch(\"https://jsonplaceholder.typicode.com/comments?postId=\" + postId)\r\n        .then(res => res.json())\r\n        .then(data => {\r\n          setComments(data);\r\n        });\r\n    }, []);\r\n  \r\n    function postComments() {\r\n      if (comments.length === 0) {\r\n        return (\r\n          <Spinner animation=\"border\" role=\"status\" style={{ margin: 20 }}>\r\n            <span className=\"sr-only\">Loading...</span>\r\n          </Spinner>\r\n        );\r\n      } else {\r\n        return comments.map(comment => (\r\n          <ListGroup.Item>{comment.body}</ListGroup.Item>\r\n        ));\r\n      }\r\n    }\r\n  \r\n    return (\r\n      <ListGroup variant=\"flush\">\r\n        <ListGroup.Item>Comments</ListGroup.Item>\r\n        {loader(\r\n          comments.length === 0,\r\n          comments.map(comment => (\r\n            <ListGroup.Item key={comment.id}>{comment.body}</ListGroup.Item>\r\n          ))\r\n        )}\r\n      </ListGroup>\r\n    );\r\n  };\r\n\r\nexport default Comments;","import React , {useState, useEffect} from 'react';\r\nimport {\r\n    Card,\r\n    Button,\r\n    Image,\r\n  } from \"react-bootstrap\";\r\n\r\nimport Comments from \"./Comments\";\r\n\r\nconst Post = ({ post, users, imgLink }) => {\r\n    const [name, setName] = useState(\"name\");\r\n  \r\n    useEffect(() => {\r\n      let t = users.find(user => {\r\n        return user.id === post.userId;\r\n      });\r\n  \r\n      if (t !== undefined) {\r\n        setName(t.name);\r\n      }\r\n    }, [users]);\r\n  \r\n    return (\r\n      <Card className=\"posts\">\r\n        <Card.Header>\r\n          <Card.Title>{post.title}</Card.Title>\r\n        </Card.Header>\r\n        <Card.Body>\r\n            <Image src={imgLink} className=\"postImg\" />\r\n          <Card.Title>By <a href={\"/user/\" + post.userId}>{name}</a></Card.Title>\r\n          <Card.Text>{post.body}</Card.Text>\r\n          <Button variant=\"primary\">Read more</Button>\r\n        </Card.Body>\r\n        <Comments postId={post.id} />\r\n      </Card>\r\n    );\r\n  };\r\n\r\nexport default Post;","import React , {Component}from 'react';\r\nimport {Card, Container, ListGroup} from 'react-bootstrap';\r\nimport Post from \"./Post\";\r\n\r\nclass Profile extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            users: [],\r\n            posts: [],\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        const userPosts = \"https://jsonplaceholder.typicode.com/posts?userId=\" + (this.props.match.params.id);\r\n        Promise.all([\r\n            fetch(\"https://jsonplaceholder.typicode.com/users\"),\r\n            fetch(userPosts)\r\n          ])\r\n            .then(([res1, res2]) => {\r\n              return Promise.all([res1.json(), res2.json()]);\r\n            })\r\n            .then(([res1, res2]) => {\r\n                this.setState({ users: res1, posts: res2});\r\n            }).catch(console.log);\r\n    }\r\n\r\n    createBox(label, info){\r\n        if(info === undefined){\r\n            return \"Loading..\";\r\n        }\r\n        return(\r\n            <ListGroup horizontal style={{paddingTop: 10}}>\r\n                <ListGroup.Item style={{width: 150}}>{label}</ListGroup.Item>\r\n                <ListGroup.Item>{info}</ListGroup.Item>\r\n            </ListGroup>\r\n        )\r\n    }\r\n\r\n    render() {\r\n        let user = this.state.users[this.props.match.params.id-1];\r\n\r\n        return (\r\n          <Container style={{ paddingTop: 10 }}>\r\n            <Card>\r\n              <Card.Header>\r\n                <Card.Title>{user && user.name}</Card.Title>\r\n              </Card.Header>\r\n              <Card.Body>\r\n                {this.createBox(\"Username\", user && user.username)}\r\n                {this.createBox(\"Phone\", user && user.phone)}\r\n                {this.createBox(\r\n                  \"City\",\r\n                  user && user.address !== undefined ? user.address.city : \"Loading...\"\r\n                )}\r\n                {this.createBox(\r\n                  \"Company\",\r\n                  user && user.company !== undefined ? user.company.name : \"Loading...\"\r\n                )}\r\n                {this.createBox(\"Website\", user && user.website)}\r\n                <Card.Body>\r\n                  <blockquote className=\"blockquote mb-0\">\r\n                    <p>\r\n                      {\" \"}\r\n                      {user && user.company !== undefined\r\n                        ? user.company.catchPhrase\r\n                        : \"Loading..\"}{\" \"}\r\n                    </p>\r\n                    <footer className=\"blockquote-footer\">\r\n                      {user && user.name} from{\" \"}\r\n                      <cite>\r\n                        {user && user.company !== undefined\r\n                          ? user.company.name\r\n                          : \"Loading..\"}\r\n                      </cite>\r\n                    </footer>\r\n                  </blockquote>\r\n                </Card.Body>\r\n              </Card.Body>\r\n            </Card>\r\n\r\n            <h3 style={{marginTop: 10}}>Posts by {user && user.name} </h3>\r\n\r\n            {this.state.posts.map(post => {\r\n              return (\r\n                <Post\r\n                  key={post.id}\r\n                  post={post}\r\n                  users={this.state.users}\r\n                  imgLink={'https://source.unsplash.com/random'}\r\n                />\r\n              );\r\n            })}\r\n          </Container>\r\n        );\r\n    }\r\n}\r\n \r\nexport default Profile;\r\n\r\n","import React, { Component, useState, useEffect} from \"react\";\nimport \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport Post from \"./Post\";\nimport Profile from \"./Profile\";\n\nimport {\n  Container,\n  Nav,\n  Navbar,\n  Form,\n  Button,\n  FormControl,\n  Image,\n  Card,\n  Jumbotron,\n} from \"react-bootstrap\";\n\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n} from \"react-router-dom\";\n\nconst MainNav = () => {\n  return (\n    <Navbar bg=\"dark\" variant=\"dark\">\n      <Navbar.Brand href=\"/home\">Bozo</Navbar.Brand>\n      <Nav className=\"mr-auto\">\n        <Nav.Link href=\"/home\">Home</Nav.Link>\n        <Nav.Link href=\"/posts\">All Posts</Nav.Link>\n        <Nav.Link href=\"/about\">About</Nav.Link>\n      </Nav>\n    </Navbar>\n  );\n};\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      posts: [],\n      users: [],\n      imgLinks: []\n    };\n  }\n\n  componentDidMount() {\n    Promise.all([\n      fetch(\"https://jsonplaceholder.typicode.com/posts\"),\n      fetch(\"https://jsonplaceholder.typicode.com/users\"),\n      fetch(\"https://picsum.photos/v2/list?page=2&limit=100\")\n    ])\n      .then(([res1, res2, res3]) => {\n        return Promise.all([res1.json(), res2.json(), res3.json()]);\n      })\n      .then(([res1, res2, res3]) => {\n        this.setState({ posts: res1, users: res2, imgLinks: res3 });\n      }).catch(console.log);\n  }\n\n  render() {\n    return (\n      <div>\n        <Router>\n        <MainNav />\n        <Image className=\"mainImg\" src=\"https://source.unsplash.com/random\" />\n        \n          <Switch>\n            <Route path=\"/home\" component={Home}  />\n            <Route path=\"/posts\" component={AllPosts} />\n            <Route path=\"/about\" component={About} />\n            <Route path=\"/user/:id\" component={Profile} />\n          </Switch>\n        </Router>\n      </div>\n    );\n  }\n}\n\n\nconst Home = () => {\n  return (\n    <Container>\n      \n    <Jumbotron style={{marginTop: 10}}>\n      <Card.Title>\n        Home Page\n      </Card.Title>\n      <Card.Body>\n      Lorem ipsum dolor sit amet, consectetur adipiscing elit. Fusce vitae laoreet nunc, maximus dapibus arcu. Aliquam erat volutpat. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Sed eu enim porta, sagittis mauris vel, ullamcorper risus. Vestibulum vestibulum pharetra pharetra. Curabitur magna leo, auctor nec lectus eget, iaculis tempor urna. Praesent ac dictum eros. Morbi volutpat, nisl sed aliquam cursus, lorem ligula congue risus, vitae imperdiet eros sapien vel felis. Cras sagittis maximus ante in tempus. Pellentesque in tellus ac augue iaculis venenatis interdum in sapien.<br/><br/>\n\n      Morbi vehicula id justo nec sagittis. Cras fringilla magna et eros ultricies, vel molestie arcu blandit. Duis laoreet pulvinar odio, blandit placerat augue euismod eu. Duis sapien ex, gravida eu erat id, congue varius velit. Sed vel cursus est. Ut vitae arcu at felis mattis facilisis. Donec venenatis vestibulum sem, id faucibus neque mollis non. Cras mauris purus, facilisis sed pellentesque non, fermentum vel erat. Vestibulum ac nisi in eros efficitur ultricies et eu turpis. Interdum et malesuada fames ac ante ipsum primis in faucibus. Ut elementum nisl a est luctus, at mattis arcu gravida.<br/><br/>\n\n      Aenean est purus, semper ac risus vitae, aliquam consequat erat. Nunc finibus sodales lacus vitae tincidunt. Praesent luctus sodales mauris a ornare. Nullam et ullamcorper elit. Phasellus bibendum at orci nec malesuada. Suspendisse metus mauris, fermentum sit amet magna condimentum, consequat rutrum nisi. Orci varius natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Cras erat arcu, egestas ac nisi vitae, volutpat laoreet tortor. Etiam in ipsum sed lacus condimentum ornare quis non augue. Etiam eget ante sodales, malesuada urna vitae, finibus erat. Donec nec metus sed ipsum finibus faucibus. Proin magna ipsum, consequat a mauris vel, pharetra ultricies enim. Nam interdum tempus ipsum eget facilisis. Duis commodo, justo nec eleifend pharetra, lacus lacus varius eros, ac volutpat ligula sapien id massa. In dui felis, laoreet eget quam et, imperdiet elementum urna.\n      </Card.Body>\n    </Jumbotron>\n\n    </Container>\n  )\n}\n\nconst About = () => {\n  return (\n    <Container>\n      \n    <Jumbotron style={{marginTop: 10}}>\n      <Card.Title>\n        About\n      </Card.Title>\n      <Card.Body>\n      Lorem ipsum dolor sit amet, consectetur adipiscing elit. Fusce vitae laoreet nunc, maximus dapibus arcu. Aliquam erat volutpat. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Sed eu enim porta, sagittis mauris vel, ullamcorper risus. Vestibulum vestibulum pharetra pharetra. Curabitur magna leo, auctor nec lectus eget, iaculis tempor urna. Praesent ac dictum eros. Morbi volutpat, nisl sed aliquam cursus, lorem ligula congue risus, vitae imperdiet eros sapien vel felis. Cras sagittis maximus ante in tempus. Pellentesque in tellus ac augue iaculis venenatis interdum in sapien.<br/><br/>\n\n      Morbi vehicula id justo nec sagittis. Cras fringilla magna et eros ultricies, vel molestie arcu blandit. Duis laoreet pulvinar odio, blandit placerat augue euismod eu. Duis sapien ex, gravida eu erat id, congue varius velit. Sed vel cursus est. Ut vitae arcu at felis mattis facilisis. Donec venenatis vestibulum sem, id faucibus neque mollis non. Cras mauris purus, facilisis sed pellentesque non, fermentum vel erat. Vestibulum ac nisi in eros efficitur ultricies et eu turpis. Interdum et malesuada fames ac ante ipsum primis in faucibus. Ut elementum nisl a est luctus, at mattis arcu gravida.<br/><br/>\n\n      Aenean est purus, semper ac risus vitae, aliquam consequat erat. Nunc finibus sodales lacus vitae tincidunt. Praesent luctus sodales mauris a ornare. Nullam et ullamcorper elit. Phasellus bibendum at orci nec malesuada. Suspendisse metus mauris, fermentum sit amet magna condimentum, consequat rutrum nisi. Orci varius natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Cras erat arcu, egestas ac nisi vitae, volutpat laoreet tortor. Etiam in ipsum sed lacus condimentum ornare quis non augue. Etiam eget ante sodales, malesuada urna vitae, finibus erat. Donec nec metus sed ipsum finibus faucibus. Proin magna ipsum, consequat a mauris vel, pharetra ultricies enim. Nam interdum tempus ipsum eget facilisis. Duis commodo, justo nec eleifend pharetra, lacus lacus varius eros, ac volutpat ligula sapien id massa. In dui felis, laoreet eget quam et, imperdiet elementum urna.\n      </Card.Body>\n    </Jumbotron>\n\n    </Container>\n  );\n}\n\nclass AllPosts extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      posts: [],\n      users: [],\n      imgLinks: []\n    };\n  }\n\n  componentDidMount() {\n    Promise.all([\n      fetch(\"https://jsonplaceholder.typicode.com/posts\"),\n      fetch(\"https://jsonplaceholder.typicode.com/users\"),\n      fetch(\"https://picsum.photos/v2/list?page=2&limit=100\")\n    ])\n      .then(([res1, res2, res3]) => {\n        return Promise.all([res1.json(), res2.json(), res3.json()]);\n      })\n      .then(([res1, res2, res3]) => {\n        this.setState({ posts: res1, users: res2, imgLinks: res3 });\n      }).catch(console.log);\n\n    /*     fetch('https://jsonplaceholder.typicode.com/posts')\n    .then(res => res.json())\n    .then((data) => {\n      this.setState({posts: data});\n\n      fetch('https://picsum.photos/v2/list?page=2&limit=' + this.state.posts.length)\n      .then(res => res.json())\n      .then((data) => {\n        console.log(data);\n        this.setState({imgLinks: data})\n      })\n      .catch(console.log)\n\n    })\n    .catch(console.log)\n\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(res => res.json())\n    .then((data) => {\n      this.setState({users: data})\n    })\n    .catch(console.log) */\n  }\n\n  render() { \n    return (\n      <Container>\n          <h1 className=\"title\">All Posts</h1>\n          {this.state.posts.map(post => {\n            return (\n              <Post\n              key={post.id}\n              post={post}\n              users={this.state.users}\n              imgLink={this.state.imgLinks[post.id-1].download_url}\n            />\n            )\n          })}\n        </Container>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}